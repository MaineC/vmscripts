#!/bin/bash -ue
#
# 'vmscripts' low-level VM management scripts main call entry point
#
# Copyright Â© 2015 Thilo Fromm. Released under the terms of the GNU GLP v3.
#
#    vmscripts is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    vmscripts is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with vmscripts. If not, see <http://www.gnu.org/licenses/>.#
#

#
# MODULES API
# - modules must be in the current PATH
# - modules are named 'vm-<modname>.sh'
# - modules implement at least two functions:
#
#   <modname>_usage() {
#       echo "Usage: vm <modname> ...."
#   }
#
#  vm_<modname>() {
#       # main entry function of module
#  }
#
# - modules define one global variable determining the importance of the
#   <vm-name> argument:
#
#  vmscripts_prereq=""
#
#  Values:
#    'none'   - VM name must neither be provided nor needs the VM to exist
#    'name'   - A VM name must be provided
#    'exist'  - A name must be provided and the corresponding VM must exist
#    'active' - The VM specified by the <name> argument must be up + running
#
# Variables defined and exported by "vm" main entry script
# - basically, look at setup_env()
# - also, all values from the config and the run time config

VM_CONFIG_PATH="$HOME/.vmscripts"
export VM_CONFIG_PATH
# ----

vm_usage() {
    local ret=0
    echo
    if [ $# -ge 1 ] ; then
        echo " $@"
            ret=1
    fi
    echo " Usage:"
    echo "    vm <creat|ls|start|attach|ssh|off>"
    echo
    exit $ret
}
# ----

usage() {
    local ret=0
    echo
    if [ $# -ge 1 ] ; then
        echo " vm $vm_cmd: $@"
        ret=1
    fi
    ${vm_cmd}_usage
    echo
    exit $ret
}
# ----

die() {
    echo                >&2
    echo "ERROR: $@"    >&2
    echo                >&2
    exit 1
}
# ----

write_rtconf() {
    echo "$1=\"$2\"" >> "$vm_rtconf"
}
# ----

setup_env() {
    vm_name="$1"
    vm_path="$VM_CONFIG_PATH/$vm_name"

    local vm_prefix="$vm_path/$vm_name"

    vm_disk_image="${vm_prefix}.img"
    vm_iso_image="${vm_prefix}.iso"

    vm_export_dir="$(cd "$(pwd)/../"; pwd)"

    vm_pidfile="${vm_prefix}.pid"
    vm_logfile="${vm_prefix}.log"

    vm_rtconf="${vm_prefix}.run"
    vm_config="${vm_prefix}.cfg"

    # source static and run time config if present
    [ -f "$vm_config" ] && source "$vm_config"
    [ -f "$vm_rtconf" ] && source "$vm_rtconf"

    vm_tools_initialized="YES"

    export vm_name vm_path vm_disk_image vm_iso_image vm_export_dir vm_pidfile \
           vm_logfile vm_rtconf vm_config vm_tools_initialized write_rtconf
}
# ----

source_script() {
    local script="$1"

    source "$script"

    # check VM name command line option
    [ "$vmscripts_prereq" = "none" ] && return

    [ -z "$vm_name" ] &&    \
        usage "This command takes a mandatory <name> argument"
    [ "$vmscripts_prereq" = "name" ] && return

    vm ls | grep -qw "$vm_name" || \
        usage "Unknown VM ${vm_name}. Try 'vm ls' to get a list."
    [ "$vmscripts_prereq" = "exist" ] && return

    vm ls -a | grep -qw "$vm_name" || \
        usage "VM ${vm_name} is currently inactive. Try starting it with 'vm start $vm_name'."
}
# ----

vm_main() {
    vm_name=""
    vm_cmd=""

    [ $# -lt 1 ] && vm_usage "No command provided."
    [ "$1" = "-h" ] && vm_usage

    vm_cmd="$1"; shift
    export vm_cmd

    local script=$(which "vm-${vm_cmd}.sh" 2>/dev/null)
    [ -z "$script" ] && vm_usage  "Unknown command '$vm_cmd'."

    setup_env "${1-}"
    source_script "$script"
    [ "${1-}" = "-h" ] && usage

    vm_${vm_cmd} $@
}
# ----

if [ `basename "$0"` = "vm" ] ; then
    vm_main $@
else
    true
fi
